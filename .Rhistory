gy003_tumor$Tx[gy003_tumor$Tx==1] <- "Nivo"
gy003_tumor$Tx[gy003_tumor$Tx==2] <- "Combo"
gy003_tumor$Tx <- factor(gy003_tumor$Tx, levels=c("Nivo","Combo"))
gy003_tumor$Response2_SD <- gy003_tumor$Response2
gy003_tumor$Response2_SD[gy003_tumor$Response2=="SD" & gy003_tumor$PFS>=6] <-"SD_CB"
gy003_tumor$Response2_SD[gy003_tumor$Response2=="SD" & gy003_tumor$PFS<6] <-"SD_NCB"
gy003_tumor$Response2_SD[gy003_tumor$Response=="C"] <- "CR"
gy003_tumor$Response2_SD[gy003_tumor$Response=="P"] <- "PR"
gy003_tumor$Response2_SD <- factor(gy003_tumor$Response2_SD, levels=c("CR","PR","SD_CB","SD_NCB","PD"))
gy003_tumor$Outcome <- gy003_tumor$Response2_SD
gy003_tumor$Outcome <- as.character(gy003_tumor$Outcome)
gy003_tumor$Outcome[gy003_tumor$Outcome=="SD_CB"] <- "CB"
gy003_tumor$Outcome[gy003_tumor$Outcome %in% c("CR","PR")] <- "CB"
gy003_tumor$Outcome[gy003_tumor$Outcome=="SD_NCB"] <- "NCB"
gy003_tumor$Outcome[gy003_tumor$Outcome=="PD"] <- "NCB"
table(gy003_tumor$Outcome)
gy003_tumor$Outcome <- factor(gy003_tumor$Outcome, levels=c("CB","NCB"))
gy003_tumor$Race[gy003_tumor$Race!="W"] <- "Non White"
gy003_tumor$Race[gy003_tumor$Race=="W"] <- "White"
gy003_tumor$Race <- factor(gy003_tumor$Race, levels=c("White", "Non White"))
gy003_tumor$BMI <- as.integer(gy003_tumor$BMI)
summary(gy003_tumor$BMI)
ggplot(gy003_tumor, aes(x=BMI, group=1)) +
theme_minimal() +
scale_fill_viridis(discrete=T, option="B", alpha=0.5, begin=0.6,end=0.2) +
geom_bar(stat="count")
# Median BMI 27
gy003_tumor$BMIcut <- gy003_tumor$BMI
gy003_tumor$BMIcut[gy003_tumor$BMI>="27"] <- "BMI high"
gy003_tumor$BMIcut[gy003_tumor$BMI<"27"] <- "BMI low"
gy003_tumor$BMIcut <- factor(gy003_tumor$BMIcut, levels=c("BMI low","BMI high"))
table(gy003_tumor$BMIcut)
ggplot(gy003_tumor, aes(x=TCellContent, fill=Outcome)) +
theme_minimal() +
scale_fill_viridis(discrete=T, option="B", alpha=0.5, begin=0.6,end=0.2) +
geom_bar(stat="count") +
labs(x="Estimated Tumor T Cell Content", y="Patients (count)", fill="Response",
title="Estimated Tumor T cell Content by ICI response (CB/NCB) \nNRG-GY003 Trial, n=39")
ggplot(gy003_tumor, aes(x=TCellContent, fill=Outcome)) +
theme_minimal() +
scale_fill_viridis(discrete=T, option="B", alpha=0.5, begin=0.65,end=0.25) +
geom_bar(stat="count") +
labs(x="Estimated Tumor T Cell Content", y="Patients (count)", fill="Response",
title="Estimated Tumor T cell Content by ICI response (Nivo and Combo CB/NCB) \nNRG-GY003 Trial",
subtitle="Nivo n=18, Combo n=21") +
facet_wrap(~Tx)
ggplot(gy003_tumor, aes(x=TCellContent, fill=Outcome)) +
theme_minimal() +
scale_fill_viridis(discrete=T, option="D", alpha=0.5, begin=0.6,end=0.2) +
geom_bar(stat="count") +
labs(x="Estimated Tumor T Cell Content", y="Patients (count)", fill="Response",
title="Estimated Tumor T cell Content by ICI response (CB/NCB) \nNRG-GY003 Trial, n=39",
subtitle="BMI < median (27) vs BMI >= median") +
facet_wrap(~BMIcut)
ggplot(data=gy003_tumor, aes(x=TCellContent, fill=Outcome)) +
theme_minimal() +
scale_fill_viridis(discrete=T, option="B", alpha=0.5, begin=0.6,end=0.2) +
geom_bar(position="fill")+
geom_hline(yintercept=0.5,linetype='dashed', color="gray") +
labs(x="Estimated Tumor T Cell Content", y="Patients (%)", fill="Response",
title="Estimated Tumor T cell Content by ICI response (CB/NCB) \nNRG-GY003 Trial, n=39")
## Immunarch for NRG-GY003 TCRs from Nivo NCB TRB only
library(immunarch)
setwd("//researchsan02b.mssm.edu/shr2/immunobio/Zamarin_Lab/Kelsey/Work/")
# Load the data
immdata <- repLoad("//researchsan02b.mssm.edu/shr2/immunobio/Zamarin_Lab/Kelsey/Work/NRG-GY003_TCRs/TRB/Nivo_NCB")
# Calculate and visualise basic statistics ----
repExplore(immdata$data, "lens") %>% vis() # Visualize CDR3 length distributions
repExplore(immdata$data, "volume") %>% vis() # Number of unique clonotypes
repExplore(immdata$data, "volume") %>% vis(.by="Tissue_Type",.meta=immdata$meta) # Number of unique clonotypes by tissue type (normal/tumor)
repExplore(immdata$data, "volume") %>% vis(.by="Tissue_Timepoint",.meta=immdata$meta)
repExplore(immdata$data, "count") %>% vis() # Distribution of clonotype abundances, i.e., how frequent receptors with different abundances are
repExplore(immdata$data, "count") %>% vis(.by="Tissue_Type",.meta=immdata$meta) # Distribution of clonotype abundances by tissue type
repExplore(immdata$data, "clones") %>% vis() # Number of clones (i.e., cells) per input repertoire
repExplore(immdata$data, "clones") %>% vis(.by="Tissue_Type",.meta=immdata$meta) # Number of clones per input repertoire by tissue type
repExplore(immdata$data, "clones") %>% vis(.by="Tissue_Timepoint",.meta=immdata$meta)
tc1 <- trackClonotypes(immdata$data, list(3, 10), .col = "aa") # GADBKF
tc2 <- trackClonotypes(immdata$data, list(4, 10), .col = "aa") # GADCGH
tc3 <- trackClonotypes(immdata$data, list(5, 10), .col = "aa") # GADCGU*
tc4 <- trackClonotypes(immdata$data, list(1, 10), .col = "aa") # GADCIC
tc5 <- trackClonotypes(immdata$data, list(2, 10), .col = "aa") # GADCIR*
tc6 <- trackClonotypes(immdata$data, list(7, 10), .col = "aa") # GADCIX*
tc7 <- trackClonotypes(immdata$data, list(8, 10), .col = "aa") # GADCJW*
tc8 <- trackClonotypes(immdata$data, list(9, 10), .col = "aa") # GADCJX
tc9 <- trackClonotypes(immdata$data, list(6, 10), .col = "aa") # GADCJY*
tc10 <- trackClonotypes(immdata$data, list(10, 10), .col = "aa") # GADCLH
tc11 <- trackClonotypes(immdata$data, list(11, 10), .col = "aa") # GADCMW
tc12 <- trackClonotypes(immdata$data, list(13, 10), .col = "aa") # GADCMZ*
tc13 <- trackClonotypes(immdata$data, list(14, 10), .col = "aa") # GADCNB
tc14 <- trackClonotypes(immdata$data, list(15, 10), .col = "aa") # GADCNX
tc15 <- trackClonotypes(immdata$data, list(16, 10), .col = "aa") # GADCPJ (unpaired)
tc16 <- trackClonotypes(immdata$data, list(44, 10), .col = "aa") # GADCRK (unpaired)
tc17 <- trackClonotypes(immdata$data, list(69, 10), .col = "aa") # GADCRU* (unpaired)
tc18 <- trackClonotypes(immdata$data, list(12, 10), .col = "aa") # GADFYV (unpaired)
tc19 <- trackClonotypes(immdata$data, list(17, 10), .col = "aa") # GADGAB (unpaired)
tc20 <- trackClonotypes(immdata$data, list(19, 10), .col = "aa") # GADGAC
tc21 <- trackClonotypes(immdata$data, list(20, 10), .col = "aa") # GADGBU
tc22 <- trackClonotypes(immdata$data, list(24, 10), .col = "aa") # GADGEM
tc23 <- trackClonotypes(immdata$data, list(25, 10), .col = "aa") # GADGGB
tc24 <- trackClonotypes(immdata$data, list(26, 10), .col = "aa") # GADGGF*
tc25 <- trackClonotypes(immdata$data, list(21, 10), .col = "aa") # GADGGK
tc26 <- trackClonotypes(immdata$data, list(22, 10), .col = "aa") # GADGGL*
tc27 <- trackClonotypes(immdata$data, list(23, 10), .col = "aa") # GADGGS (unpaired)
tc28 <- trackClonotypes(immdata$data, list(27, 10), .col = "aa") # GADGHL*
tc29 <- trackClonotypes(immdata$data, list(28, 10), .col = "aa") # GADHS*
tc30 <- trackClonotypes(immdata$data, list(66, 10), .col = "aa") # GADGHU* (unpaired)
tc31 <- trackClonotypes(immdata$data, list(29, 10), .col = "aa") # GADGII*
tc32 <- trackClonotypes(immdata$data, list(30, 10), .col = "aa") # GADGMX (unpaired)
vis(tc1, .order=samp_order) / vis(tc2, .order=samp_order) / vis(tc3, .order=samp_order) / vis(tc4, .order=samp_order)
samp_order <- immdata$meta$Order_desired
vis(tc1, .order=samp_order) / vis(tc2, .order=samp_order) / vis(tc3, .order=samp_order) / vis(tc4, .order=samp_order)
vis(tc1, .order=samp_order)
## Tumor AA clones vs PBMCs
tc1_tu <- trackClonotypes(immdata$data, list(62, 10), .col = "aa") # GADCGU*
vis(tc1_tu, .order = samp_order)
tc2_tu <- trackClonotypes(immdata$data, list(61, 10), .col = "aa") # GADCIR*
tc3_tu <- trackClonotypes(immdata$data, list(63, 10), .col = "aa") # GADCIX*
tc4_tu <- trackClonotypes(immdata$data, list(60, 10), .col = "aa") # GADCJW*
tc5_tu <- trackClonotypes(immdata$data, list(59, 10), .col = "aa") # GADCJY*
tc6_tu <- trackClonotypes(immdata$data, list(71, 10), .col = "aa") # GADCMZ*
tc7_tu <- trackClonotypes(immdata$data, list(67, 10), .col = "aa") # GADGGF*
tc8_tu <- trackClonotypes(immdata$data, list(68, 10), .col = "aa") # GADGGL*
tc9_tu <- trackClonotypes(immdata$data, list(64, 10), .col = "aa") # GADGHL*
tc10_tu <- trackClonotypes(immdata$data, list(65, 10), .col = "aa") # GADHS*
tc11_tu <- trackClonotypes(immdata$data, list(70, 10), .col = "aa") # GADGII*
vis(tc2_tu, .order = samp_order)
vis(tc3_tu, .order = samp_order)
getwd()
setwd("\\\\researchsan02b.mssm.edu/shr2/immunobio/Zamarin_Lab/Kelsey/Work")
getwd()
setwd("\\\\researchsan02b.mssm.edu/shr2/immunobio/Zamarin_Lab/Kelsey/Work/Productive_R")
getwd()
data <- read.csv("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_2.csv")
summary(data)
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Torgersen")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Biscoe")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Dream")$bill_length_mm),2))
# Plot
penguins_clean <- na.omit(   data  ) #That's a lot of space around data? ðŸ¤” In 1 click, you can remove all the weird formatting issues in this file!
plot(penguins_clean$bill_length_mm, penguins_clean$bill_depth_mm, type='n', xlab='Bill Length (mm)', ylab='Bill Depth (mm)', main='Penguin Bill Dimensions')
## Using ggplot2 and more generally the tidyverse in this file will make everything simpler for you and people who read your code.
points(
penguins_clean$bill_length_mm[penguins_clean$species  ==  "Adelie"], penguins_clean$bill_depth_mm[penguins_clean$species == "Adelie"], col='red', pch=16)
points(penguins_clean$bill_length_mm[penguins_clean$species == "Chinstrap"], penguins_clean$bill_depth_mm[penguins_clean$species == "Chinstrap"], col='green', pch=17)
points(penguins_clean$bill_length_mm[penguins_clean$species == "Gentoo"],
penguins_clean$bill_depth_mm[penguins_clean$species == "Gentoo"], col='blue', pch=18)
legend("topright", legend=unique(penguins_clean$species),
col=c('red'
, 'green',
'blue'), pch=c(16, 17, 18))
setwd("\\\\researchsan02b.mssm.edu/shr2/immunobio/Zamarin_Lab/Kelsey/Work/productive-r-workflow")
# Productive R Course
library(tidyverse)
data %>%
filter(!is.na(bill_length_mm), species == "Adelie") %>%
summarise(mean_bill_length = mean(bill_length_mm)) %>%
pull(mean_bill_length) %>%
round(2)
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Torgersen")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Biscoe")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Dream")$bill_length_mm),2))
library(dplyr)
library(ggplot2)
# Read the data
data <- read_csv("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_2.csv")
str(data)
# Display summary statistics
summary(data)
data %>%
filter(species == "Adelie") %>%
group_by(island) %>%
summarise(mean_bill_length = round(mean(bill_length_mm, na.rm =TRUE), 2)) %>%
print()
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Torgersen")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Biscoe")$bill_length_mm),2))
print(round(mean(subset(na.omit(data), species == "Adelie" & island == "Dream")$bill_length_mm),2))
penguins_clean <- data %>% drop_na()
ggplot(penguins_clean, aes(x=bill_length_mm, y=bill_depth_mm, color=species, shape=species)) +
geom_point() +
labs(
x = "Bill Length (mm)",
y = "Bill depth (mm)",
title="Penguin Bill Dimensions",
color="Species",
shape="Species"
) +
scale_color_manual(values=c("Adelie" = "red", "Chinstrap" = "green", "Gentoo" = "blue")) +
scale_shape_manual(values=c("Adelie" = 16, "Chinstrap" = 17, "Gentoo" = 18)) +
theme_minimal()
install.packages('stylr')
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
styler:::style_selection()
data <- read.csv("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_2.csv")
- R/          # Where the R scripts live
- input/      # Data files
- output/     # Results: plots, tables...
write.csv(data, "data.csv")
getwd()
- R/          # Where the R scripts live
- input/      # Data files
- output/     # Results: plots, tables...
write.csv(data, "input/data.csv")
write.csv(data, "input/data.csv")
# Read the data
data <- read_csv("input/data.csv")
# Display summary statistics
summary(data)
# Calculate mean bill length for Adelie penguins on different islands
data %>%
filter(species == "Adelie") %>%
group_by(island) %>%
summarise(mean_bill_length = round(mean(bill_length_mm, na.rm = TRUE), 2)) %>%
print()
# Clean data by removing NA values
penguins_clean <- data %>% drop_na()
# Create the plot
ggplot(penguins_clean, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
geom_point() +
labs(
x = "Bill Length (mm)",
y = "Bill depth (mm)",
title = "Penguin Bill Dimensions",
color = "Species",
shape = "Species"
) +
scale_color_manual(values = c("Adelie" = "red", "Chinstrap" = "green", "Gentoo" = "blue")) +
scale_shape_manual(values = c("Adelie" = 16, "Chinstrap" = 17, "Gentoo" = 18)) +
theme_minimal()
getwd()
library(readxl)
data <- read_excel("input/data.xlsx", na = "NA")
View(data)
data <- read_excel("input/data.xlsx")
View(data)
data <- read_excel("input/data.xlsx", na = "NA")
calc_mean_bill <- function(island_name) {
filtered_data <- subset(na.omit(data), species == "Adelie" & island==island_name)
mean_bill_length <- mean(filtered_data$bill_length_mm)
return(round(mean_bill_length_length, 2))
}
View(calc_mean_bill)
calc_mean_bill("Torgersen")
return(round(mean_bill_length, 2))
calc_mean_bill <- function(island_name) {
filtered_data <- subset(na.omit(data), species == "Adelie" & island==island_name)
mean_bill_length <- mean(filtered_data$bill_length_mm)
return(round(mean_bill_length, 2))
}
calc_mean_bill("Torgersen")
calc_mean_bill("Biscoe")
calc_mean_bill("Dream")
# Calculate mean bill length for Adelie penguins on different islands
data %>%
filter(species == "Adelie") %>%
group_by(island) %>%
summarise(mean_bill_length = round(mean(bill_length_mm, na.rm = TRUE), 2)) %>%
print()
# Calculate mean bill length for Adelie penguins on different islands
data %>%
filter(species == "Adelie") %>%
group_by(island) %>%
summarise(mean_bill_length = round(mean(bill_length_mm, na.rm = TRUE), 2)) %>%
print()
## {Tidyverse} ----
# Seqera AI suggested update using dplyr and ggplot2
# Load required libraries
library(tidyverse)
# Calculate mean bill length for Adelie penguins on different islands
data %>%
filter(species == "Adelie") %>%
group_by(island) %>%
summarise(mean_bill_length = round(mean(bill_length_mm, na.rm = TRUE), 2)) %>%
print()
calc_mean_bill("Torgersen")
calc_mean_bill("Biscoe")
calc_mean_bill("Dream")
## Functions ----
# Function to calculate mean bill length for the 3 species, and then call 3 times for each island
calc_mean_bill <- function(island_name) {
filtered_data <- subset(na.omit(data), species == "Adelie" & island == island_name)
mean_bill_length <- mean(filtered_data$bill_length_mm)
return(round(mean_bill_length, 2))
}
# Call the function for each island
calc_mean_bill("Torgersen")
calc_mean_bill("Biscoe")
calc_mean_bill("Dream")
## Function to multiply a value by 234:
multiply_by_twothreefour <- function(a) {
return(a * 234)
}
multiply_by_twothreefour(311)
# Function to sum two numbers
sumup <- function(a,b) {
return(a+b)
}
sumup(3256,8934)
## Example for even number
is_even <- function(number) {
return(number %% 2 == 0)
}
is_even(2)
is_even(22)
is_even(221)
View(is_even)
??%%
?%%
?function
?function()
v
is_even()
# Display summary statistics
summary(data)
ggplot(data, aes(x=bill_length_mm,y=bill_depth_mm, color=species_name, shape=species_name)) +
geom_point()
styler:::style_selection()
### Function for bill length and bill depth ----
# Create the plot function
create_scatterplot <- function(data, selected_species, selected_island) {
# Filter the data for specified species and island
filtered_data <- data %>%
na.omit() %>%
filter(species == selected_species, island == selected_island)
# Create scatterplot
plot <- ggplot(
filtered_data,
aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)
) +
geom_point() +
labs(
x = "Bill Length (mm)",
y = "Bill Depth (mm)",
title = paste("Penguin Bill Dimensions -", selected_species, "-", selected_island)
)
return(plot)
}
create_scatterplot(data,"Adelie","Torgersen")
create_scatterplot(data,"Adelie","Biscoe")
create_scatterplot(data,"Chinstrap","Torgersen")
create_scatterplot(data,"Chinstrap","Biscoe")
str(data$species)
table(data$species)
table(data$island)
create_scatterplot(data,"Adelie","Biscoe")
create_scatterplot(data,"Adelie","Dream")
create_scatterplot(data,"Chinstrap","Torgersen")
create_scatterplot(data,"Chinstrap","Biscoe")
create_scatterplot(data,"Chinstrap","Dream")
create_scatterplot(data,"Gentoo","Torgersen")
create_scatterplot(data,"Gentoo","Biscoe")
create_scatterplot(data,"Gentoo","Dream")
data <- read_excel("input/data.xlsx", na = "NA")
# Split your Code ----
source(functions.R)
# Split your Code ----
source(functions.R)
# Split your Code ----
source(functions.R)
getwd()
# Split your Code ----
source(R/functions.R)
# Split your Code ----
source("R/functions.R")
create_scatterplot(data,"Adelie","Torgersen")
data <- read_excel("input/data.xlsx")
library(deplyr)
library(readxl)
data <- read_excel("input/data.xlsx", na="NA")
# Remove 2 rows known to be wrong
clean_data <- data %>%
slice(-c(23,48))
# Save in RDS format
saveRDS(clean_data, file="input/clean_data.rds")
load("input/clean_data.rds")
readRDS("input/clean_data.rds")
readRDS("input/clean_data.rds")
data <- readRDS("input/clean_data.rds")
# Summary
summary(data)
# Split your Code ----
## Created a functions.R file in the R/ directory with the create_scatterplot function above
## Using source() to read in the function contained in it
source(file="R/functions.R")
install.packages("rmarkdown")
# load the tidyverse
library(tidyverse)
# Source functions
source(file="functions.R")
# Read the clean dataset
data <- readRDS(file="../input/clean_data.rds")
# Summary
summary(data)
data %>%
filter(species=="Adelie") %>%
group_by(island) %>%
summarize(mean_bill_length = round(mean(bill_length_mm, na.rm=TRUE),2))
# Use the function in functions.R
create_scatterplot(data,"Adelie","Torgersen")
# load the tidyverse
| echo: false
# load the tidyverse
echo: false
#| echo: false
2 * 2
#| echo: false
# load the tidyverse
library(tidyverse)
# Source functions
source(file="functions.R")
# Read the clean dataset
data <- readRDS(file="../input/clean_data.rds")
# Summary
summary(data)
# Calculating mean bill length for different species and islands using dplyr
data %>%
filter(species=="Adelie") %>%
group_by(island) %>%
summarize(mean_bill_length = round(mean(bill_length_mm, na.rm=TRUE),2))
# Use the function in functions.R
create_scatterplot(data,"Adelie","Torgersen")
# Source functions
source(file="functions.R")
# Read the clean dataset
data <- readRDS(file="../input/clean_data.rds")
styler:::style_selection()
# load the tidyverse
library(tidyverse)
# Source functions
source(file="functions.R")
# Read the clean dataset
data <- readRDS(file="../input/clean_data.rds")
# Summary
summary(data)
# Calculating mean bill length for different species and islands using dplyr
data %>%
filter(species=="Adelie") %>%
group_by(island) %>%
summarize(mean_bill_length = round(mean(bill_length_mm, na.rm=TRUE),2))
# Use the function in functions.R
create_scatterplot(data,"Adelie","Torgersen")
library(patchwork)
# Use the function in functions.R
p1 <- create_scatterplot(data,"Adelie","Torgersen")
p2 <- create_scatterplot(data, "Adelie","Dream")
p1+p2
data %>%
filter(species=="Adelie") %>%
group_by(island) %>%
summarize(mean_bill_length = round(mean(bill_length_mm, na.rm=TRUE),2))
data %>%
group_by(species) %>%
summarise(mean_bill_length = round(mean(bill_length_mm, na.rm=TRUE),2))
# Use the function in functions.R
p1 <- create_scatterplot(data,"Adelie","Torgersen")
p2 <- create_scatterplot(data, "Chinstrap","Dream")
p1+p2
p1/p2
install.packages("hrbrthemes")
## Bill Length: Descriptive Analytics
![Bill measurement explanation](asset/culmen_depth.png){width=300}
## Bill Length: Descriptive Analytics
![Bill measurement explanation](asset/culmen_depth.png){width=300}
styler:::style_selection()
styler:::style_selection()
data %>%
ggplot(
aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point(color="#69b3a2") +
labs(
x = "Bill Length (mm)",
y = "Bill Depth (mm)",
title = paste("Surprising relationship?")
) +
theme_ipsum()
# load the tidyverse
library(tidyverse)
library(hrbrthemes) # ipsum theme for ggplot2 charts
library(patchwork) # combine charts together
data %>%
ggplot(
aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point(color="#69b3a2") +
labs(
x = "Bill Length (mm)",
y = "Bill Depth (mm)",
title = paste("Surprising relationship?")
) +
theme_ipsum()
#| layout-ncol: 2
data %>%
group_by(species) %>%
summarise(average_bill_length = mean(bill_length_mm, na.rm=TRUE))
data %>%
group_by(species) %>%
summarise(average_bill_depth = mean(bill_depth_mm, na.rm=TRUE))
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
# Use the function in functions.R
p1 <- create_scatterplot(data, "Adelie", "#6689c6")
p2 <- create_scatterplot(data, "chinstrap", "#e85252")
p3 <- create_scatterplot(data, "Gentoo", "#9a6fb0")
p1 + p2 + p3
getwd()
